'''
1
Функции
Даны четыре действительных числа: x1, y1, x2, y2.
Напишите функцию  area(x1, y1, x2, y2), вычисляющую площадь
прямоугольного треугольника, образованного прямой, проходящей
через точки (x1,y1) и (x2,y2) и перепендикулярами, опущенными на оси координат.
Считайте четыре действительных числа и выведите результат работы этой функции.
'''
# x1, x2, y1, y2 хранят координаты
# не удаляйте функцию area, напишите свою реализацию

# x1, x2, y1, y2 хранят координаты
# не удаляйте функцию area, напишите свою реализацию
def area(x1, x2, y1, y2):
    a = abs(y1 - y2)
    b = abs(x1 - x2)
    return (a * b) / 2
print( area(1,3,1,3))



# '''
#  2 Написать функцию is_pow(x), принимающую 1 аргумент — число x от 2 до 1000,
# и возвращающую True если это число является целой степенью (с показателем больше 1)
# целого числа, и False - иначе.
#  x хранит число
# не удаляйте функцию is_pow, напишите свою реализацию
# '''
def is_pow(x):
    print(x)
    a = int(pow(x,0.5))+2
    for i in range(2,a):
        for j in range(2,a):
            if x == i**j:
                print (i,j)
                return True
    else:
        print (i,j,"!",a)
        return False

print( is_pow(500))


#3
def stronger(scores):
''' Дан список результатов попыток одного спортсмена для некоторого соревнования.
Написать функцию stronger(scores), которая считает сколько раз за сессию спортсмен
показал результат лучше, чем в прошлую попытку, то есть текущее значение превышает предыдущее.
# scores хранит список результатов
# не удаляйте функцию stronger, напишите свою реализацию
'''
    sport_count=0
    for i in range (1,len(scores)):
        if scores[i]>scores[i-1]:
            sport_count +=1
    return sport_count
    
scores = [10, 5, 20, 20, 4, 5, 2, 25, 1]
print (stronger(scores))

№4
# x хранит число
# не удаляйте функцию avaranger, напишите свою реализацию
# >>> avaranger(10) # Среднее арифметическое 10
# >>> 10
# >>> avaranger(11) # Среднее арифметическое 10 и 11
# >>> 10.5
# >>> avaranger(12) # Среднее арифметическое 10, 11 и 12
# >>> 11
def avaranger(x):
# Написать функцию avaranger(x), которая принимает 1 аргумент -
# любое число и возвращается среднее арифметическое значение,
# на основании текущего числа и предыдущих, которые были введены ранее.
    if not hasattr(avaranger, "my_avenge"):
        avaranger.my_avenge = []
    avaranger.my_avenge.append(x)
    return sum(avaranger.my_avenge)/len(avaranger.my_avenge)


#5
# Реализовать функцию map(array, func), принимающей два аргумента:
#список и произвольную арифметическую функцию. Функция map должна
#возвращать новый список, элементы которого являются результатом функции func.
# Например
# Определим функцию func(x), которая возвращает квадрат аргумента:

def func(x):
  return x**2
# array хранит список, func - функцию
# не удаляйте функцию map, напишите свою реализацию
def map(array, func):
    return [func(x) for x in array]
    
    
    
# 6
# Реализовать функцию reduce(array, func, init), принимающей два обязательных аргумента:
# список и произвольную функцию двух аргументов и один опциональный аргумент - начальное значение.
# Функция reduce должна возвращать результат последовательного кумулятивного
# вызова функции func с результатом предыдущего вызова и следующим элементом списка.
# Если начальное значение не передано, то первый вызов осуществляется с первыми двумя элементами
# списка, иначе в первый вызов передаются начальное значение и первый элемент списка.

# Например
# Если вызвать reduce следующим образом:
# >>> reduce([1, 2, 3, 4], lambda x, y: x + y)
# То результат должен соответствовать выполнению слеующего выражения:
# >>> (((1 + 2) + 3) + 4)


# array хранит список, func - функцию, init - начальное значение
# init может как передаваться в функцию reduce, так и не передаваться
# не удаляйте функцию reduce, напишите свою реализацию
def reduce(array, func, init=None):
    print (array)
    if init == None:
        number=array[0]
        for i in range(1, len(array)):
            number=func(number,array[i])
    else:
        for i in array:
            number = func(number,i)
    return number
